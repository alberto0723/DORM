import requests
import csv
from io import StringIO
import time
from bs4 import BeautifulSoup

"""
This module fetches filtered SQL logs from SDSS using the x_sql.asp endpoint.
It integrates pre-parsing filters (error=0, elapsed>0, rows>0) directly into the query
to improve performance. Previously, filtering was handled in a separate module.
"""

URL = "https://skyserver.sdss.org/log/en/traffic/x_sql.asp"
HEADERS = {
    "User-Agent": "Mozilla/5.0",
    "Content-Type": "application/x-www-form-urlencoded"
}


def get_total_logs(year: int = None, month: int = None, day: int = None) -> int:
    message = f"🔍 Querying total logs for "
    query = """SELECT COUNT(*) as total_logs
    FROM SqlLog
    WHERE
        error = 0 AND
        elapsed > 0 AND
        [rows] > 0"""
    if year is not None:
        message += f"{year}"
        query += f" AND datepart(yyyy, theTime) = {year}"
    if month is not None:
        message += f"-{str(month).zfill(2)}"
        query += f" AND datepart(mm, theTime) = {month}"
    if day is not None:
        message += f"-{str(day).zfill(2)}"
        query += f" AND datepart(dd, theTime) = {day}"
    message += f"\n{query}. This can take some minutes ..."
    query.replace("\n", " ").strip()

    data = {"cmd": query, "format": "html"}

    print(message)
    start = time.time()
    response = requests.post(URL, data=data, headers=HEADERS)
    end = time.time()

    if response.status_code == 200:
        if response.text.startswith("<html>"):
            parsed_html = BeautifulSoup(response.text, "html.parser")
            # Next line completely depends on the query and the current HTML generated by the API. It can be unstable!
            total_logs = parsed_html.find_all("font")[1].get_text()
        else:
            # Execution with the current API does not enter this code, because it returns HTML
            csv_data = csv.reader(StringIO(response.text))
            rows = list(csv_data)

            if len(rows) < 2:
                print("⚠️ No data rows returned.")
                print(f"Raw response:\n{response.text}")
                return 0

            header, first_data_row = rows[0], rows[1]
            total_logs = first_data_row[0]

        print(f"✅ Total logs: {total_logs} (⏱️ {round(end - start, 2)}s)")
        return int(total_logs)

    else:
        raise Exception(f"❌ Failed with status {response.status_code}\n{response.text[:300]}")
